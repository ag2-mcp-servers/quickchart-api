# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:46:58+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Query

from models import ChartPostRequest, QrPostRequest

app = MCPProxy(
    description='An API to generate charts and QR codes using QuickChart services.',
    title='QuickChart API',
    version='1.0.0',
    servers=[{'url': 'https://quickchart.io'}],
)


@app.get(
    '/chart',
    description=""" Generate a chart based on the provided parameters. """,
    tags=['chart_generation'],
)
def get_chart(
    chart: Optional[str] = None,
    width: Optional[int] = None,
    height: Optional[int] = None,
    format: Optional[str] = None,
    background_color: Optional[str] = Query(None, alias='backgroundColor'),
):
    """
    Generate a chart (GET)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/chart',
    description=""" Generate a chart based on the provided configuration in the request body. """,
    tags=['chart_generation'],
)
def post_chart(body: ChartPostRequest):
    """
    Generate a chart (POST)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/qr',
    description=""" Generate a QR code based on the provided parameters. """,
    tags=['qr_code_generation'],
)
def get_qr(
    text: Optional[str] = None,
    width: Optional[int] = None,
    height: Optional[int] = None,
    format: Optional[str] = None,
    margin: Optional[int] = None,
):
    """
    Generate a QR code (GET)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/qr',
    description=""" Generate a QR code based on the provided configuration in the request body. """,
    tags=['qr_code_generation'],
)
def post_qr(body: QrPostRequest):
    """
    Generate a QR code (POST)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
